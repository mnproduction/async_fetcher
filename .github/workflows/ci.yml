name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --extra linters

      - name: Run Ruff linter
        run: |
          uv run ruff check --output-format=github .

      - name: Run Ruff formatter check
        run: |
          uv run ruff format --check .

  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration]
    
    services:
      flaresolverr:
        image: ghcr.io/flaresolverr/flaresolverr:latest
        ports:
          - 8191:8191

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --extra test

      - name: Wait for FlareSolverr
        run: |
          timeout 60 bash -c 'until curl -f -X POST http://localhost:8191/v1 -H "Content-Type: application/json" -d "{\"cmd\":\"sessions.list\"}" | grep -q "sessions"; do sleep 2; done'

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          uv run pytest -m "unit" --cov=api --cov=toolkit --cov=settings --cov-report=xml --cov-report=term-missing

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          uv run pytest -m "integration" --cov=api --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    services:
      flaresolverr:
        image: ghcr.io/flaresolverr/flaresolverr:latest
        ports:
          - 8191:8191

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --extra test

      - name: Wait for FlareSolverr
        run: |
          timeout 60 bash -c 'until curl -f -X POST http://localhost:8191/v1 -H "Content-Type: application/json" -d "{\"cmd\":\"sessions.list\"}" | grep -q "sessions"; do sleep 2; done'

      - name: Run E2E tests
        run: |
          uv run pytest -m "e2e and not cloudflare" --tb=short -v
        timeout-minutes: 10

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: async-fetcher:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
           # Load the image from buildx cache
           docker buildx build --load --tag async-fetcher:test .
           docker run --rm async-fetcher:test uv run python -c "import api.main; print('Docker build successful')"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync

      - name: Run safety check
        run: |
          uv add --dev safety
          uv run safety check --json --output safety-report.json || true

      - name: Upload safety report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: safety-report.json