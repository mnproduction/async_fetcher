[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "async-fetcher"
version = "0.1.0"
description = "A simplified service for fetching content from Cloudflare-protected sites using FlareSolverr"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "aiohttp>=3.12.15",
    "brotli>=1.1.0",
    "fastapi>=0.116.1",
    "httpx>=0.24.0",
    "pydantic>=2.11.7",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "python-dotenv>=1.1.1",
    "structlog>=25.4.0",
    "uvicorn[standard]>=0.35.0",
    "uvloop>=0.20.0; sys_platform != 'win32'",
]

[project.optional-dependencies]
test = [
    "freezegun>=1.4.0",
    "pytest-cov>=6.0.0",
]
linters = [
    "ruff>=0.12.7",
]

[dependency-groups]
dev = [
    "freezegun>=1.5.3",
]

[tool.setuptools.packages.find]
include = ["api*", "toolkit*", "settings*"]

[tool.pytest.ini_options]
pythonpath = "."
addopts = "-v"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "strict"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]
markers = [
    "unit: Unit tests for individual components (fast, mocked)",
    "integration: Integration tests for API endpoints (mocked FlareSolverr)",
    "e2e: End-to-end tests with real FlareSolverr service (slow)",
    "slow: Tests that take longer to run (>5 seconds)",
    "flaresolverr: Tests that require FlareSolverr service",
    "fast: Tests that run quickly (under 1 second)",
    "network: Tests that require network access",
    "mock: Tests that use mocked dependencies",
    "cloudflare: Tests that interact with Cloudflare-protected sites"
]

# Test configurations for different scenarios:
#
# Fast tests (unit + mocked integration):
# pytest -m "not e2e and not slow" --cov=api --cov=toolkit --cov=settings --cov-report=term-missing --cov-report=html:htmlcov --cov-fail-under=75
#
# Integration tests (with mocked FlareSolverr):
# pytest -m "integration" --tb=short
#
# E2E tests (requires FlareSolverr service):
# pytest -m "e2e" --tb=short -v
#
# Cloudflare tests (requires FlareSolverr + network):
# pytest -m "cloudflare" --tb=short -v -s

[tool.ruff]
target-version = "py313"
line-length = 100
extend-exclude = [
    ".venv",
    "venv",
    ".pytest_cache",
    "__pycache__",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["N802", "N803"]  # Allow non-conforming function names in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.coverage.run]
source = ["api", "toolkit", "settings"]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
